/* Generated by Yosys 0.32+51 (git sha1 6405bbab1, gcc 12.3.0-1ubuntu1~23.04 -fPIC -Os) */

module pes_seq_det_ml_fsm(sequence_in, clock, reset, detector_out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  input clock;
  wire clock;
  reg [2:0] current_state;
  output detector_out;
  reg detector_out;
  wire [2:0] next_state;
  input reset;
  wire reset;
  input sequence_in;
  wire sequence_in;
  sky130_fd_sc_hd__a21boi_0 _40_ (
    .A1(_30_),
    .A2(_31_),
    .B1_N(_39_),
    .Y(_36_)
  );
  sky130_fd_sc_hd__nand2b_1 _41_ (
    .A_N(_29_),
    .B(_39_),
    .Y(_32_)
  );
  sky130_fd_sc_hd__a21oi_1 _42_ (
    .A1(_30_),
    .A2(_32_),
    .B1(_31_),
    .Y(_33_)
  );
  sky130_fd_sc_hd__nor2b_1 _43_ (
    .A(_39_),
    .B_N(_29_),
    .Y(_34_)
  );
  sky130_fd_sc_hd__o21a_1 _44_ (
    .A1(_30_),
    .A2(_34_),
    .B1(_33_),
    .X(_37_)
  );
  sky130_fd_sc_hd__xnor2_1 _45_ (
    .A(_29_),
    .B(_39_),
    .Y(_35_)
  );
  sky130_fd_sc_hd__a211oi_1 _46_ (
    .A1(_30_),
    .A2(_31_),
    .B1(_33_),
    .C1(_35_),
    .Y(_38_)
  );
  sky130_fd_sc_hd__and4b_1 _47_ (
    .A_N(_30_),
    .B(_29_),
    .C(_31_),
    .D(_39_),
    .X(_28_)
  );
  always @(posedge clock)
    if (reset) detector_out <= 1'h0;
    else detector_out <= _00_;
  always @(posedge clock, posedge reset)
    if (reset) current_state[0] <= 1'h0;
    else current_state[0] <= next_state[0];
  always @(posedge clock, posedge reset)
    if (reset) current_state[1] <= 1'h0;
    else current_state[1] <= next_state[1];
  always @(posedge clock, posedge reset)
    if (reset) current_state[2] <= 1'h0;
    else current_state[2] <= next_state[2];
  assign _30_ = current_state[1];
  assign _29_ = current_state[0];
  assign _31_ = current_state[2];
  assign _39_ = sequence_in;
  assign next_state[0] = _36_;
  assign next_state[1] = _37_;
  assign next_state[2] = _38_;
  assign _00_ = _28_;
endmodule
